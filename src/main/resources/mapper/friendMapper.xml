<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Friend">
    <!-- 친구 요청 보내기 -->
    <insert id="sendFriendRequest" parameterType="map">
        INSERT INTO friend (requester_id, addressee_id, status)
        VALUES (#{requesterId}, #{addresseeId}, 'REQUEST')
    </insert>

    <!-- 친구 요청 수락 -->
    <update id="acceptFriendRequest" parameterType="map">
        UPDATE friend SET status = 'ACCEPT'
        WHERE requester_id = #{requesterId} AND addressee_id = #{addresseeId} AND status = 'REQUEST'
    </update>

    <!-- 친구 요청 거절 -->
    <update id="rejectFriendRequest" parameterType="map">
        UPDATE friend SET status = 'REJECT'
        WHERE requester_id = #{requesterId} AND addressee_id = #{addresseeId} AND status = 'REQUEST'
    </update>

    <!-- 친구 목록 조회 (수락된 친구만) -->
    <select id="findFriends" parameterType="long" resultType="member">
        SELECT m.*
        FROM member_table m
        WHERE m.id IN (
            SELECT CASE
                       WHEN requester_id = #{memberId} THEN addressee_id
                       WHEN addressee_id = #{memberId} THEN requester_id
                       END
            FROM friend
            WHERE (requester_id = #{memberId} OR addressee_id = #{memberId})
              AND status = 'ACCEPT'
        )
    </select>

    <!-- 받은 친구 요청 목록 -->
    <select id="findReceivedRequests" parameterType="long" resultType="member">
        SELECT m.*
        FROM member_table m
        WHERE m.id IN (
            SELECT requester_id FROM friend
            WHERE addressee_id = #{memberId} AND status = 'REQUEST'
        )
    </select>

    <!-- 보낸 친구 요청 목록 -->
    <select id="findSentRequests" parameterType="long" resultType="member">
        SELECT m.*
        FROM member_table m
        WHERE m.id IN (
            SELECT addressee_id FROM friend
            WHERE requester_id = #{memberId} AND status = 'REQUEST'
        )
    </select>

    <select id="isFriend" parameterType="map" resultType="int">
        SELECT COUNT(*) FROM friend
        WHERE (
            (requester_id = #{myId} AND addressee_id = #{otherId})
                OR
            (requester_id = #{otherId} AND addressee_id = #{myId})
            )
          AND status = 'ACCEPT'
    </select>

    <!-- 추천 친구 -->
    <select id="findRecommendedFriends" parameterType="map" resultType="member">
        SELECT m.*
        FROM member_table m
        JOIN profile_table p ON m.id = p.member_id
        WHERE m.id != #{myId}
        AND (
        <foreach collection="myInterests" item="interest" separator=" OR ">
            p.favorite_exercises LIKE CONCAT('%', #{interest}, '%')
        </foreach>
        )
        AND m.id NOT IN (
        SELECT CASE
        WHEN requester_id = #{myId} THEN addressee_id
        WHEN addressee_id = #{myId} THEN requester_id
        END
        FROM friend
        WHERE (requester_id = #{myId} OR addressee_id = #{myId})
        AND status = 'ACCEPT'
        )
        AND m.id NOT IN (
        SELECT requester_id FROM friend WHERE addressee_id = #{myId} AND status = 'REQUEST'
        UNION
        SELECT addressee_id FROM friend WHERE requester_id = #{myId} AND status = 'REQUEST'
        )
    </select>

    <delete id="deleteFriend" parameterType="map">
        DELETE FROM friend
        WHERE (
            (requester_id = #{myId} AND addressee_id = #{friendId})
                OR
            (requester_id = #{friendId} AND addressee_id = #{myId})
            )
          AND status = 'ACCEPT'
    </delete>

    <!-- 친구 칼로리 순위 -->
    <select id="findFriendsByCaloriesRank" parameterType="long" resultType="map">
        SELECT m.id, m.memberName, m.memberEmail, IFNULL(SUM(e.calories), 0) AS totalCalories
        FROM member_table m
                 JOIN friend f ON (m.id = f.requester_id OR m.id = f.addressee_id)
                 LEFT JOIN exercise_record e ON m.id = e.member_id
        WHERE f.status = 'ACCEPT'
          AND (f.requester_id = #{memberId} OR f.addressee_id = #{memberId})
          AND m.id != #{memberId}
        GROUP BY m.id, m.memberName, m.memberEmail
        ORDER BY totalCalories DESC
    </select>

</mapper>
